# -*- coding: utf-8 -*-
"""Polymorphism.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5es5dWNdkwmRvRb7NTA5V4W9G3aaDHO
"""

# Polymorphism

# Poly means many
# and
# phism means form

"1"+"2"

# Object , Method, Operator

# Method  , Operator

class A:
  def info(self,y):
    print("info function with no parameter")

  def info(self,z):
    print("info function with 1 parameter")

  def info(self):              # last called
    print("info function")     # becouse of name space


a1=A()
a1.info()

# Method  , Operator

class A:

  def info(self):
    print("info function with no parameter")

  def info(self, *z):
    print("info function",z)

a1=A()
a1.info(10,20,30)
a1.info(10)

# Method Overidding (Supported in Python)

# This is an example of Single Inheritance, where class B inherits the method info() from class A.‚Äù
class A:

  def info(self):
    print("info function with no parameter")

class B(A):
  def info2(self):
    print("B function info")

b1=B()
b1.info()

class A:

  def info(self):
    print("info function with no parameter")

class B(A):
  def info2(self,):
    print("B function info")

  def vijay(self):
    super().info()        # calling info of parent class
    self.info()           # calling info of child class (own class)

b1=B()
b1.info()
b1.vijay()

# Operator Overidding (Supported in Python)

class A:
  def __init__(self, x, y):
    self.x=x
    self.y=y
  def __add__(self, z):
    print("+ operator",self,z)

a1=A(10,20)
a2=A(11,21)
a1 + a2

#  __add__    ( dunder function [ __init__, __str__ ] )
#  __sub__    ( )

class A:
  def __init__(self, x, y):
    self.x=x
    self.y=y
  def __add__(self, z):
    print("+ operator",self.x,z.x)

a1=A(10,20)
a2=A(11,21)
a1 + a2

# can a constructor a overloade in python

class A:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

a1 = A()
a2 = A(10)
a3 = A(10, 20)